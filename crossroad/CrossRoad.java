/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package crossroad;

import java.awt.event.KeyEvent;
import java.awt.geom.Area;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;

/**
 *
 * @author x
 */
public class CrossRoad extends javax.swing.JFrame {

    /**
     * Creates new form CrossRoad
     */
    public CrossRoad() {
        initComponents();
        startGame();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frog = new javax.swing.JLabel();
        car2 = new javax.swing.JLabel();
        car1 = new javax.swing.JLabel();
        car4 = new javax.swing.JLabel();
        car3 = new javax.swing.JLabel();
        points = new javax.swing.JLabel();
        gameOver = new javax.swing.JLabel();
        finalPoints = new javax.swing.JLabel();
        road = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(660, 475));
        setMinimumSize(new java.awt.Dimension(660, 475));
        setPreferredSize(new java.awt.Dimension(660, 475));
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(null);

        frog.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crossroad/Webp.net-resizeimage.png"))); // NOI18N
        frog.setMaximumSize(new java.awt.Dimension(80, 80));
        frog.setMinimumSize(new java.awt.Dimension(80, 80));
        frog.setName("frog"); // NOI18N
        frog.setPreferredSize(new java.awt.Dimension(40, 40));
        getContentPane().add(frog);
        frog.setBounds(300, 390, 40, 30);

        car2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crossroad/car1.png"))); // NOI18N
        car2.setName("car2"); // NOI18N
        getContentPane().add(car2);
        car2.setBounds(550, 250, 90, 50);

        car1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crossroad/car4.png"))); // NOI18N
        car1.setName("car1"); // NOI18N
        getContentPane().add(car1);
        car1.setBounds(10, 300, 90, 70);

        car4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crossroad/car3.png"))); // NOI18N
        car4.setMaximumSize(new java.awt.Dimension(78, 47));
        car4.setMinimumSize(new java.awt.Dimension(78, 47));
        car4.setName("car4"); // NOI18N
        getContentPane().add(car4);
        car4.setBounds(550, 80, 100, 40);

        car3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crossroad/car4.png"))); // NOI18N
        car3.setName("car3"); // NOI18N
        getContentPane().add(car3);
        car3.setBounds(10, 120, 90, 40);

        points.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(points);
        points.setBounds(10, 10, 60, 30);

        gameOver.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        gameOver.setText("GAME OVER");
        getContentPane().add(gameOver);
        gameOver.setBounds(190, 150, 270, 110);

        finalPoints.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        finalPoints.setText("Your points: ");
        getContentPane().add(finalPoints);
        finalPoints.setBounds(250, 250, 130, 22);

        road.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crossroad/road.jpg"))); // NOI18N
        road.setMaximumSize(new java.awt.Dimension(840, 440));
        road.setMinimumSize(new java.awt.Dimension(840, 440));
        road.setPreferredSize(new java.awt.Dimension(840, 440));
        getContentPane().add(road);
        road.setBounds(0, 0, 640, 440);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if(!this.gameStarted){
            if(evt.getKeyCode()==KeyEvent.VK_ENTER){
                startGame();
            }
            return;
        }
        
        if(evt.getKeyCode()==KeyEvent.VK_UP){
            moveForward();
        }else if(evt.getKeyCode()==KeyEvent.VK_DOWN){
            moveBack();
        }else if(evt.getKeyCode()==KeyEvent.VK_LEFT){
            moveLeft();
        }else if(evt.getKeyCode()==KeyEvent.VK_RIGHT){
            moveRight();
        }
       
    }//GEN-LAST:event_formKeyPressed

    private void moveForward(){
        frog.setLocation(frog.getX(), frog.getY() - 64);
        if(frog.getY()<0){
            frog.setLocation(frog.getX(), 390);
        }
        this.score+=1;
        this.points.setText(Integer.toString(this.score));
        
    }
    
    private void moveBack(){
        if(frog.getY()<390){
            frog.setLocation(frog.getX(), frog.getY()+64);
            this.score-=1;
            this.points.setText(Integer.toString(this.score));
        } 
    }
    
    private void moveRight(){
        frog.setLocation(frog.getX()+ 45, frog.getY());
        if(frog.getX()>=660){
            frog.setLocation(0, frog.getY());
        }
    }
    private void moveLeft(){
        frog.setLocation(frog.getX()-45, frog.getY());
        if(frog.getX()<=0){
            frog.setLocation(660-frog.getWidth(), frog.getY());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CrossRoad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CrossRoad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CrossRoad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CrossRoad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new CrossRoad().setVisible(true);
        });
    }
    
    
    private void startGame(){
       this.score = 0;
       this.gameStarted = true;
       this.gameOver.setVisible(false);
       this.finalPoints.setVisible(false);
       this.points.setVisible(true);
       this.points.setText("0");
       this.frog.setLocation(300,390);
       startThreads();
       
    }
    private void endGame(){
        this.gameStarted = false;
        this.gameOver.setVisible(true);
        this.finalPoints.setVisible (true);
        this.points.setVisible (false);
        this.finalPoints.setText("Your points: " + points.getText());
    }
    
    private void startThreads(){
        createThreads();
        
        mover1.start(); 
        mover2.start();
        mover3.start();
        mover4.start();
    }
    
    private void createThreads(){
      this.mover1 = new Thread(){
        public void run() {
            while (true) {
                car1.setLocation(car1.getX() + 1, car1.getY());
                if (intersects(car1, frog)) {
                    endGame();
                    return;
                }
                try {
                    Thread.sleep(3);
                } catch (InterruptedException ex) {
                    Logger.getLogger(CrossRoad.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (car1.getX() + car1.getWidth() > 660) {
                    car1.setLocation(0-car1.getWidth(), car1.getY());
                }
            }
        }
      };
      
      this.mover2 = new Thread(){
        public void run() {
            while (true) {
                car2.setLocation(car2.getX() - 1 , car2.getY());
                if (intersects(car2, frog)) {
                    endGame();
                    return;
                }
                try {
                    Thread.sleep(3);
                } catch (InterruptedException ex) {
                    Logger.getLogger(CrossRoad.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (car2.getX() + car2.getWidth() < 0) {
                    car2.setLocation(660, car2.getY());
                }
            }
        }
      };
      
      this.mover3 = new Thread(){
        public void run() {
            while (true) {
                car3.setLocation(car3.getX() + 1, car3.getY());
                if (intersects(car3, frog)) {
                    endGame();
                    return;
                }
                try {
                    Thread.sleep(4);
                } catch (InterruptedException ex) {
                    Logger.getLogger(CrossRoad.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (car3.getX() + car3.getWidth() > 660) {
                    car3.setLocation(0-car3.getWidth(), car3.getY());
                }
            }
        }
      };
       this.mover4 = new Thread(){
        public void run() {
            while (true) {
                car4.setLocation(car4.getX() - 1 , car4.getY());
                if (intersects(car4, frog)) {
                    endGame();
                    return;
                }
                try {
                    Thread.sleep(2);
                } catch (InterruptedException ex) {
                    Logger.getLogger(CrossRoad.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (car4.getX() + car4.getWidth() < 0) {
                    car4.setLocation(660, car4.getY());
                }
            }
        }
      };
      
      
    }
    
    
    private boolean intersects(JLabel car, JLabel frog) {
       Area carArea = new Area(car.getBounds());
       Area frogArea = new Area(frog.getBounds());
       return frogArea.intersects(carArea.getBounds2D()); 
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel car1;
    private javax.swing.JLabel car2;
    private javax.swing.JLabel car3;
    private javax.swing.JLabel car4;
    private javax.swing.JLabel finalPoints;
    private javax.swing.JLabel frog;
    private javax.swing.JLabel gameOver;
    private javax.swing.JLabel points;
    private javax.swing.JLabel road;
    // End of variables declaration//GEN-END:variables
    private Thread mover1;
    private Thread mover2;
    private Thread mover3;
    private Thread mover4;
    private boolean gameStarted;
    private int score;
}
